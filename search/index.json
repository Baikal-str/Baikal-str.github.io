[{"content":"Задача: Копирование базы данных PostgreSQL через Rundeck Запрос Необходимо предоставить разработчикам возможность копировать БД из прода в среду разработки. Решили использовать Rundeck, упаковать выполнения команд в web, для удобства разработчиков. В ОС с Rundeck установлен postgresql-client.\npg-prod - Сервер СУБД PostgreSQL продуктивный pg-dev - Сервер СУБД PostgreSQL тестовый (работает на порту 5433) citizix_user - пользователь с правами чтения на продуктивном сервере Задача разбита на 8 шагов:\nПроверить наличие старого dump файла Проверить наличие БД на сервере-источнике Создать dump БД Удалить базу данных на сервере назначения Создать пустую базу на сервере назначения Восстановить базу данных на сервере назначения Выполнить Vacuumdb Удалить dump файл Вводные параметры Опции:\nСервер источник Имя базы на сервере источнике Сервер назначения Имя базы на сервере назначения Шаги: В каждом шаге добавлено условие проверки выполнения, при ошибке выполняется exit 1, шаг и в целом задача завершается ошибкой. Возможно всю логику разместить в одном шаге, но с целью удобства отладки скрипт был разделён.\nПроверить наличие старого dump файла 1 2 3 4 5 6 7 8 9 10 11 DIRECTORY=\u0026#34;/db/dump/\u0026#34;$RD_OPTION_PG_DATNAME_S # Проверяем, существует ли директория if [ -f \u0026#34;$DIRECTORY\u0026#34; ]; then echo \u0026#34;Dump существует. Удаление...\u0026#34; rm -r \u0026#34;$DIRECTORY\u0026#34; echo \u0026#34;Dump успешно удалён.\u0026#34; else echo \u0026#34;Dump не существует.\u0026#34; fi Проверить наличие БД на сервере-источнике 1 2 3 4 5 6 7 8 9 10 # Проверяем существование базы данных db_exist=$(/usr/lib/postgresql/15/bin/psql -U citizix_user -h $RD_OPTION_PG_SOURCE_HOST -lqt | awk \u0026#39;{print $1}\u0026#39; | grep -wq $RD_OPTION_PG_DATNAME_S \u0026amp;\u0026amp; echo \u0026#34;true\u0026#34;) if [ -z \u0026#34;$db_exist\u0026#34; ]; then echo \u0026#34;База данных \u0026#39;$RD_OPTION_PG_DATNAME_S\u0026#39; не существует на сервере-источнике. Процесс остановлен.\u0026#34; exit 1 else echo \u0026#34;База данных \u0026#39;$RD_OPTION_PG_DATNAME_S\u0026#39; существует на сервере-источнике. Продолжение процесса...\u0026#34; fi Создать dump БД 1 2 3 4 5 6 7 8 9 10 DUMPFOLDER=\u0026#34;/db/dump/\u0026#34;$RD_OPTION_PG_DATNAME_S /usr/lib/postgresql/15/bin/pg_dump -d $RD_OPTION_PG_DATNAME_S -h $RD_OPTION_PG_SOURCE_HOST -U citizix_user -Fc -f $DUMPFOLDER if [ $? -eq 0 ]; then echo \u0026#34;Резервная копия базы данных $RD_OPTION_PG_DATNAME_S успешно создана.\u0026#34; else echo \u0026#34;Ошибка создания резервной копии базы данных $RD_OPTION_PG_DATNAME_S.\u0026#34; exit 1 fi Удалить базу данных на сервере назначения 1 2 3 4 5 6 7 8 9 10 11 12 13 DDB=$(echo $RD_OPTION_PG_DATNAME_DST | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39;) S_PORT=\u0026#34;5433\u0026#34; # Проверяем существование базы данных db_exist=$(/usr/lib/postgresql/15/bin/psql -U citizix_user -p $S_PORT -h $RD_OPTION_PG_DISTANATION_HOST -lqt | cut -d \\| -f 1 | grep -wq $DDB \u0026amp;\u0026amp; echo \u0026#34;true\u0026#34;) if [ -n \u0026#34;$db_exist\u0026#34; ]; then echo \u0026#34;База данных \u0026#39;$DDB\u0026#39; существует. Удаление...\u0026#34; /usr/lib/postgresql/15/bin/dropdb -U citizix_user -h $RD_OPTION_PG_DISTANATION_HOST -p $S_PORT -f $DDB echo \u0026#34;База данных успешно удалена.\u0026#34; else echo \u0026#34;База данных \u0026#39;$DDB\u0026#39; не существует.\u0026#34; fi Создать пустую базу на сервере назначения 1 2 3 4 5 6 7 8 9 10 11 12 13 DDB=$(echo $RD_OPTION_PG_DATNAME_DST | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39;) S_PORT=\u0026#34;5433\u0026#34; # Создаем базу данных с указанным tablespace /usr/lib/postgresql/15/bin/createdb -U citizix_user -h $RD_OPTION_PG_DISTANATION_HOST -p $S_PORT --encoding=UTF8 $DDB # Проверяем успешность создания базы данных if [ $? -eq 0 ]; then echo \u0026#34;База данных \u0026#39;$DDB\u0026#39; успешно создана.\u0026#34; else echo \u0026#34;Ошибка при создании базы данных \u0026#39;$DDB\u0026#39;.\u0026#34; exit 1 fi Восстановить базу данных на сервере назначения 1 2 3 4 5 6 7 8 9 10 11 12 13 DUMPFOLDER=\u0026#34;/db/dump/\u0026#34;$RD_OPTION_PG_DATNAME_S DDB=$(echo $RD_OPTION_PG_DATNAME_DST | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39;) S_PORT=\u0026#34;5433\u0026#34; /usr/lib/postgresql/15/bin/pg_restore -h $RD_OPTION_PG_DISTANATION_HOST -p $S_PORT -U citizix_user -j 8 -d $DDB $DUMPFOLDER # Проверяем успешность создания базы данных if [ $? -eq 0 ]; then echo \u0026#34;База данных \u0026#39;$DDB\u0026#39; успешно восстановлена.\u0026#34; else echo \u0026#34;Ошибка при восстановлении базы данных \u0026#39;$DDB\u0026#39;.\u0026#34; exit 1 fi Выполнить Vacuumdb 1 2 3 4 5 6 7 8 9 10 11 12 DDB=$(echo $RD_OPTION_PG_DATNAME_DST | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39;) S_PORT=\u0026#34;5433\u0026#34; /usr/lib/postgresql/15/bin/vacuumdb -h $RD_OPTION_PG_DISTANATION_HOST -U citizix_user -p $S_PORT -d $DDB # Проверяем if [ $? -eq 0 ]; then echo \u0026#34;Vacuumdb \u0026#39;$DDB\u0026#39; успешно выполнен.\u0026#34; else echo \u0026#34;Ошибка при выполнении Vacuumdb базы данных \u0026#39;$DDB\u0026#39;.\u0026#34; exit 1 fi Удалить dump файл 1 2 3 4 5 6 7 8 9 10 11 12 13 DUMPFOLDER=\u0026#34;/db/dump/\u0026#34;$RD_OPTION_PG_DATNAME_S DUMP_SIZE=$(du -hs $DUMPFOLDER) echo \u0026#34;Размер \u0026#39;$DUMP_SIZE\u0026#39;.\u0026#34; rm -f $DUMPFOLDER # Проверяем if [ $? -eq 0 ]; then echo \u0026#34;Dump\u0026#39;$DUMPFOLDER\u0026#39; успешно удалён.\u0026#34; else echo \u0026#34;Ошибка при удалении dump \u0026#39;$DUMPFOLDER\u0026#39;.\u0026#34; exit 1 fi Итого Доступен весь вывод консоли, удобно использовать при траблшутинге. База скопирована, временные файлы удалены ","date":"2024-06-09T00:00:00Z","image":"http://localhost:1313/p/%D0%BA%D0%BE%D0%BF%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%B1%D0%B0%D0%B7%D1%8B-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85-postgresql-%D1%87%D0%B5%D1%80%D0%B5%D0%B7-rundeck/20240609155015_hua9aa59a9588b6f99a36b65cb2dc76599_116348_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/%D0%BA%D0%BE%D0%BF%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%B1%D0%B0%D0%B7%D1%8B-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85-postgresql-%D1%87%D0%B5%D1%80%D0%B5%D0%B7-rundeck/","title":"Копирование базы данных PostgreSQL через Rundeck"},{"content":"Rundeck — это программное обеспечение для управления автоматизацией операций. Оно позволяет создавать, планировать и управлять задачами автоматизации в инфраструктуре. Автоматизация возможна как в Linux-среде, так и в Windows.\nУстановка Rundeck 5.2.0 на Debian 12 Обновляем ОС 1 sudo apt -qq update -y \u0026amp;\u0026amp; sudo apt -qq upgrade -y Устанавливаем Java 1 sudo apt install default-jre Проверяем установку Java 1 java --version Так как в РФ напрямую недоступно ПО, скачиваем по VPN с официального сайта deb-пакет. Загружаем пакет на хост: 1 scp ./rundeck_5.2.0.20240410-1_all.deb user@192.168.122.237:/home/user/ Устанавливаем Rundeck 1 sudo dpkg -i rundeck_5.2.0.20240410-1_all.deb Настраиваем конфигурационный файл Необходимо изменить параметр grails.serverURL, указав IP-адрес сервера либо его DNS-имя (добавив его в DNS-записи или файл hosts).\n1 nano /etc/rundeck/rundeck-config.properties Запускаем службу и включаем автозапуск 1 systemctl start rundeckd.service \u0026amp;\u0026amp; systemctl enable rundeckd.service Логин/пароль по умолчанию: admin/admin.\nСоздадим первый проект.\nВ следующей статье разберём примеры задач.\n","date":"2024-05-18T00:00:00Z","image":"http://localhost:1313/p/%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0-rundeck-5.2.0-%D0%BD%D0%B0-debian-12/20240518220659_hu20326199076f57eae73c1f3050ce8348_67046_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0-rundeck-5.2.0-%D0%BD%D0%B0-debian-12/","title":"Установка Rundeck 5.2.0 на Debian 12"}]